#include <sstream>
#include<cmath>
#include<graphics.h>
#include<iostream>
#include <conio.h>
#include <cstdlib>
#include <string>
#include <random>

#define win_Width 1920//输出窗口宽度
#define win_Height 1080//输出窗口高度
#define JumpAcc 40//跳跃能力
#define X_V 20//horizontal velocity水平速度
#define X_Af 3//水平阻力
#define _tick 45//游戏帧率
#define _Gravity 2//重力
#define playerH 100
#define playerW 50
#define enemyV 10
#define GunPlayerDistance 30
#define gunW 20
#define gunL 40
#define playerBulletV 50
#define playerBulletR 10
#define enemyR 30
#define enemyNum  10
#define enemyAppearTime 2000
#define bulletAttackLevel 10
#define playerLifeLimit 5
const double PI = 3.14159265358979323846;
using namespace std;
int bulletAttack = bulletAttackLevel;

struct MOTION {
	int v_x = 0;
	int v_y = 0;
	int a_x = 0;
	int a_y = 0;
};


struct obj {//移动物
	int potx = win_Width / 2 - playerW / 2;
	int poty = win_Height - playerH;
	MOTION motion;
	int life = 0;

}player,//玩家
enemy[enemyNum],
enemyBoss,
gun,
playerBullet[20],
toKillBoss,
heartAdd;

double gunD;

struct Image {
	IMAGE menu;
	IMAGE background;
	IMAGE player;
	//IMAGE bullet;
	IMAGE gun;
	IMAGE gun_;
	IMAGE setting;
}image;


class Wall {
public:

	int a_x;//
	int a_y;//       a        b
	int b_x;//        +------+
	int b_y;//        |      |
	int c_x;//        +------+
	int c_y;//       d        c
	int d_x;//
	int d_y;//
	int W, H;
	//       a        b
	// a_y--  +------+
	//        |      |
	// c_y--  +------+
	//       d        c
	//        |      |
	//       a_x    c_x
	static int num;
	//Wall() { ; };
	Wall(int q, int w, int e, int r) {
		a_x = q; a_y = w;
		c_x = e; c_y = r;
		b_x = c_x; b_y = a_y;
		d_x = a_x; d_y = c_y;
		W = e - q;
		H = r - w;
		Wall::num++;
	}
}Floor(0, 1000, 1920, 1080);
Wall* wall[10];
int Wall::num = 0;


int distance(int a, int b, int c, int d) {//计算相对距离
	return pow((pow(a - b, 2) + pow(c - d, 2)), 0.5);
}

bool IfTouch(int x, int y, int W, int H, int _x, int _y, int _R) {
	if (_x<x - _R || _x>x + W + _R || _y<y - _R || _y>y + H + _R) {
		return 0;
	}
	else
		return 1;

}

void startGame();

void menuPrint();
void menuControl();
void toMenu();

void setting();
void settingPrint();
void settingControl();
bool GamingSetting = 0;
clock_t timePusae;

void Ending(int a);


//玩家移动
bool isUp = false;
bool isDown = false;
bool isLeft = false;
bool isRight = false;
bool UpinAir = 0;

int onFloor();

static int mX = 0;
static int mY = 0;
static int dX = 0;
static int dY = 0;
int centerX;
void MousePlayerDirection();
void GameControl();

void playerMove();

//敌人
double enemyPseudoRandom = 1;
int enemyAppearNum = 0;
int enemyAliveNum = 0;
int enemyDeadNum = 0;
bool enemyIfLifeIncrease = 1;
bool enemyBossIfAppear = 1;
bool enemyLifeDisplay = 1;
void enemyAppear();
void enemyBossAppear();
void enemyMove();
void enemyShouldAppear(clock_t time);
void enemyDead(int a, int b);

//枪与子弹
POINT gunPoints[4];
void gunpot();
void bulletMove();

void seckill();
bool seckillIf = 1;


//子弹攻击敌人

void bullet_enemy();

//玩家的受伤与无敌
clock_t timeGod;
bool playerGod = 0;
bool playerGodKeep = 0;
void playerGodChange(clock_t time);
void playerIfBeenHit();
void playerIfDead();

//道具
void heartAddAppear(int a, int b);
void heartAddMove();
void heartAddIfBeenHit();

void toKillBossAppear(int x, int y);
void toKillBossMove();
void toKillBossIfBeenHit();
//重开游戏
void Replay();


void drawHeart(int x, int y);
void drawtoKillBoss(int x, int y);

void delay_ms(unsigned int milliseconds);
void delay_fps(unsigned int fps);

void Print();
void outPrint();

clock_t static timep;

int menuMod = 1;
bool settingkeep = 1;



int main() {
	initgraph(win_Width, win_Height);
	startGame();

	while (1) {
		cleardevice();
		//读取数据

		GameControl();
		if (GamingSetting) {
			timep += timePusae;
			GamingSetting = 0;
		}
		clock_t time = clock();

		enemyShouldAppear(time - timep);


		//处理数据
		playerMove();
		bulletMove();
		enemyMove();
		//toKillBossMove();


		heartAddIfBeenHit();
		toKillBossIfBeenHit();
		playerGodChange(time);
		if (!playerGodKeep) { playerIfBeenHit(); }
		else {
			playerGod = 1;
		}

		bullet_enemy();
		//绘制画面
		Print();
		playerIfDead();
		FlushBatchDraw();

		//游戏帧率控制
		delay_fps(_tick);
	}

	EndBatchDraw();

	return 0;
}

// 帧率控制函数
void delay_ms(unsigned int milliseconds) {
	clock_t start_time = clock(); // 获取当前时钟时间
	while (clock() < start_time + milliseconds); // 等待指定的毫秒数
}
void delay_fps(unsigned int fps) {
	unsigned int frame_time = 1000 / fps; // 计算每帧的时间间隔（毫秒）
	delay_ms(frame_time); // 调用延迟函数
}


//绘制函数
void Print() {


	//putimage(0, 0, &image.background);
	// 
	//击败敌人数量
	TCHAR s[5];
	settextstyle(40, 0, _T("宋体"));
	swprintf_s(s, _T("%d"), enemyDeadNum);
	outtextxy(win_Width / 2, 20, s);

	//画boss
	if (enemyBoss.life) {
		setfillcolor(RGB(44, 42, 33));
		fillcircle(enemyBoss.potx, enemyBoss.poty, enemyR * 3);
	}

	//画敌人
	for (int i = 0; i < enemyNum; i++) {
		if (enemy[i].life > 0) {
			setfillcolor(RGB(0, (100 + enemy[i].life <= 255 ? (100 + enemy[i].life) : 255), 0));
			fillcircle(enemy[i].potx, enemy[i].poty, enemyR);
			if (enemyLifeDisplay)
			{
				settextstyle(20, 0, _T("宋体"));
				TCHAR e[5];
				swprintf_s(e, _T("%d"), enemy[i].life);
				outtextxy(enemy[i].potx - 10, enemy[i].poty - 10, e);
			}
		}
	}

	//画加血
	if (heartAdd.life) {
		setfillcolor(RED);
		drawHeart(heartAdd.potx, heartAdd.poty);
	}

	//画toKillBoss
	if (toKillBoss.life) {
		setfillcolor(YELLOW);
		drawtoKillBoss(toKillBoss.potx, toKillBoss.poty);
	}

	//画player
	if (playerGod)setfillcolor(YELLOW);
	else setfillcolor(WHITE);
	fillrectangle(player.potx, player.poty, player.potx + playerW, player.poty + playerH);
	outPrint();

	//画枪

	setfillcolor(RGB(0x66, 0xCC, 0xFF));
	gunpot();
	fillpolygon(gunPoints, 4);

	//画子弹
	setfillcolor(RGB(255, 255, 0));
	for (int i = 0; i < 20; i++) {
		if (playerBullet[i].life != 0) {
			circle(playerBullet[i].potx, playerBullet[i].poty, playerBulletR);
		}
	}
	//画生命值
	if (playerGod)setfillcolor(YELLOW);
	else setfillcolor(RED);
	for (int i = 0;; i++) {
		if (player.life > i) {
			drawHeart(100 + 100 * i, 100);
		}
		else break;
	}
}
void outPrint() {
	if (player.potx > win_Width) {
		POINT pts[] = { {win_Width - 10, player.poty}, {win_Width , player.poty + playerH / 2}, {win_Width - 10, player.poty + playerH} };
		solidpolygon(pts, 3);
	}
	else if (player.potx < -10) {
		POINT pts[] = { {10, player.poty}, {0, player.poty + playerH / 2}, {10, player.poty + playerH} };
		solidpolygon(pts, 3);
	}

}
void startGame() {

	BeginBatchDraw();
	while (menuMod) {
		menuPrint();
		menuControl();
	}
	menuMod = 1;
	player.life = 3;
	player.motion.a_y = _Gravity;
	timep = clock();
}

int onFloor() {//判断是否踩在地面上
	if (player.poty >= win_Height - playerH) {//判断最底部1080
		UpinAir = 0;
		return 1;
	}
	return 0;
}

void menuPrint() {
	loadimage(&image.menu, _T("images/menu.png"));
	putimage(0, 0, &image.menu);
	FlushBatchDraw();
	delay_fps(_tick);
}
void menuControl() {
	ExMessage msg;
	while (peekmessage(&msg)) {

		if (msg.message == WM_MOUSEMOVE) {//获得鼠标的坐标
			mX = msg.x;
			mY = msg.y;
		}

		if (msg.message == WM_LBUTTONDOWN) {
			if (mX > 737 && mX < 1236) {
				if (mY > 188 && mY < 369)menuMod = 0;
				else if (mY > 370 && mY < 551) setting();
				settingkeep = 1;
				//else if (mY > 552 && mY < 733)menuMod = 2;
			}
		}
	}
}
void toMenu() {
	Replay();
	startGame();
}

void setting() {
	cleardevice();
	while (settingkeep) {
		settingPrint();
		settingControl();
	}

}
void settingPrint() {
	loadimage(&image.setting, _T("images/setting.png"));
	putimage(0, 0, &image.setting);
	setfillcolor(WHITE);
	if (enemyIfLifeIncrease) {
		fillcircle(756, 297, 20);
	}
	if (enemyBossIfAppear) {
		fillcircle(756, 371, 20);
	}
	if (playerGodKeep) {
		fillcircle(756, 443, 20);
	}
	if (seckillIf) {
		fillcircle(756, 513, 20);
	}
	if (enemyLifeDisplay) {
		fillcircle(756, 580, 20);
	}
	FlushBatchDraw();
	delay_fps(_tick);

}
void settingControl() {
	ExMessage msg;
	while (peekmessage(&msg)) {
		if (msg.message == WM_MOUSEMOVE) {//获得鼠标的坐标
			mX = msg.x;
			mY = msg.y;
		}
		if (msg.message == WM_LBUTTONDOWN) {
			if (mX > 731 && mX < 782) {
				if (mY > 273 && mY < 322) {
					enemyIfLifeIncrease = !enemyIfLifeIncrease;
				}
				if (mY > 346 && mY < 396) {
					enemyBossIfAppear = !enemyBossIfAppear;
				}
				if (mY > 419 && mY < 468) {
					playerGodKeep = !playerGodKeep;
				}
				if (mY > 489 && mY < 538) {
					seckillIf = !seckillIf;
				}
				if (mY > 556 && mY < 605) {
					enemyLifeDisplay = !enemyLifeDisplay;
				}

			}
			if (mX > 1352 && mX < 1481 && mY>94 && mY < 143) {
				settingkeep = 0;
			}
		}
	}

}

void MousePlayerDirection() {

	centerX = player.potx + playerW / 2;
	dX = mX - centerX;
	dY = mY - player.poty;
	gunD = atan2(dY, dX);

}
void GameControl() {//游戏控制ExMessage方案
	ExMessage msg;
	MousePlayerDirection();
	while (peekmessage(&msg)) {

		if (msg.message == WM_KEYDOWN)
		{
			if (msg.vkcode == VK_ESCAPE) {
				toMenu();
			}
			if (msg.vkcode == 0x53) {
				GamingSetting = 1;
				clock_t t = clock();
				setting();
				settingkeep = 1;
				timePusae = clock() - t;
			}
			if (msg.vkcode == 0x50) {//暂停游戏
				Ending(2);
			}
			if (msg.vkcode == 0x52) {//暂停游戏
				Ending(3);
			}
			if (msg.vkcode == 0x57 && onFloor()) { isUp = 1; }
			if (msg.vkcode == 0x57 && !onFloor() && UpinAir == 0 && player.motion.v_y > -10) {//空中二段跳
				isUp = 1; UpinAir = 1;
			}
			//if (msg.vkcode == VK_DOWN){isDown = 1;}
			if (msg.vkcode == 0x41) { isLeft = 1; }
			if (msg.vkcode == 0x44) { isRight = 1; }
		}
		else if (msg.message == WM_KEYUP) {
			//if (msg.vkcode == VK_UP /*&& onFloor()*/){isUp = 0;}
			//if (msg.vkcode == VK_DOWN){isDown = 0;}
			if (msg.vkcode == 0x41) { isLeft = 0; }
			if (msg.vkcode == 0x44) { isRight = 0; }
		}

		if (msg.message == WM_MOUSEMOVE) {//获得鼠标的坐标
			mX = msg.x;
			mY = msg.y;
		}

		if (msg.message == WM_LBUTTONDOWN) {

			for (int i = 0; i < 20; i++) {
				if (playerBullet[i].life == 0) {
					playerBullet[i].potx = centerX + (GunPlayerDistance + gunL) * cos(gunD);
					playerBullet[i].poty = player.poty + (GunPlayerDistance + gunL) * sin(gunD);
					playerBullet[i].motion.v_x = playerBulletV * cos(gunD);
					playerBullet[i].motion.v_y = playerBulletV * sin(gunD);
					playerBullet[i].life = 1;
					break;
				}
			}
		}
		if (seckillIf) {
			if (msg.message == WM_RBUTTONDOWN) {
				seckill();
			}
		}
	}
}

void playerMove() {//玩家移动计算
	if (isUp) { player.motion.v_y = -JumpAcc; isUp = 0; }
	//if (isDown)player.poty = _Floor;
	if (isLeft)player.motion.v_x = -X_V;
	if (isRight)player.motion.v_x = X_V;

	//竖直方向
	//gravity(1);
	if (onFloor()) {
		player.poty = win_Height - playerH;
	}
	player.motion.v_y += player.motion.a_y;
	player.poty += player.motion.v_y;

	if (onFloor() && player.motion.v_y >= 0) {
		player.poty = win_Height - playerH;
		player.motion.v_y = 0;
		//player.motion.a_y = 0;
	}

	////水平方向
	//水平速度处理
	if (abs(player.motion.v_x) < X_Af) {
		player.motion.v_x = 0;
	}
	else if (player.motion.v_x > 0) {
		player.motion.v_x -= X_Af;
	}
	else player.motion.v_x += X_Af;
	//水平位置处理
	player.potx += player.motion.v_x;
}

//敌人
void enemyAppear() {

	// 创建随机数生成器引擎
	std::random_device rd;
	std::mt19937 gen(rd()); // 使用 Mersenne Twister 引擎
	std::uniform_int_distribution<> dis(0, 10000);

	// 生成随机数
	int randnum = dis(gen);

	for (int i = 0; /*i < enemyNum*/; i++) {
		if (enemy[i].life == 0) {
			if (randnum % 3 == 0) {
				enemy[i].potx = 0;
				enemy[i].poty = randnum % win_Height;
			}
			else if (randnum % 3 == 1) {
				enemy[i].potx = randnum % win_Width;
				enemy[i].poty = 0;

			}
			else {
				enemy[i].potx = win_Width;
				enemy[i].poty = randnum % win_Height;

			}
			int life = bulletAttackLevel * (enemyIfLifeIncrease ? (1 + enemyDeadNum / 3) : 1) * (1 + randnum % 3);
			enemy[i].life = (life < 255 ? life : 255);
			enemyAliveNum++;
			enemyAppearNum++;
			break;
		}
	}
}
void enemyBossAppear() {
	// 创建随机数生成器引擎
	toKillBoss.life = 0;
	std::random_device rd;
	std::mt19937 gen(rd());
	std::uniform_int_distribution<> dis(0, 10000);

	// 生成随机数
	int randnum = dis(gen);

	if (randnum % 3 == 0) {
		enemyBoss.potx = 0;
		enemyBoss.poty = randnum % win_Height;
	}
	else if (randnum % 3 == 1) {
		enemyBoss.potx = randnum % win_Width;
		enemyBoss.poty = 0;

	}
	else {
		enemyBoss.potx = win_Width;
		enemyBoss.poty = randnum % win_Height;

	}
	enemyBoss.life = 1;
	//enemyAliveNum++;
	enemyAppearNum++;
}
void enemyMove() {//向心聚拢
	for (int i = 0; i < enemyNum; i++) {
		if (enemy[i].life > 0)
		{
			double D = atan2(enemy[i].poty - player.poty, enemy[i].potx - player.potx);
			enemy[i].motion.v_x = -cos(D) * enemyV;
			enemy[i].motion.v_y = -sin(D) * enemyV;
			enemy[i].potx += enemy[i].motion.v_x;
			enemy[i].poty += enemy[i].motion.v_y;
		}
	}
	if (enemyBoss.life) {
		double D = atan2(enemyBoss.poty - player.poty, enemyBoss.potx - player.potx);
		enemyBoss.motion.v_x = -cos(D) * enemyV;
		enemyBoss.motion.v_y = -sin(D) * enemyV;
		enemyBoss.potx += enemyBoss.motion.v_x;
		enemyBoss.poty += enemyBoss.motion.v_y;
	}

}
void enemyShouldAppear(clock_t time) {
	if (enemyAliveNum < 4) {
		if (time > enemyAppearNum * enemyAppearTime) {
			enemyAppear();
			if (enemyDeadNum % 3 == 0 && enemyDeadNum && !enemyBoss.life && enemyBossIfAppear) {
				enemyBossAppear();
				return;
			}
			if (enemyDeadNum > 10)
				enemyAppear();
		}
	}
}
void enemyDead(int x, int y) {//敌人死亡后
	// 创建随机数生成器引擎
	enemyDeadNum++;
	enemyAliveNum--;

	// 生成随机数
	std::random_device rd;
	std::mt19937 gen(rd());
	std::uniform_int_distribution<> dis(0, 100);

	int randnum = dis(gen);
	if (randnum < 34 * enemyPseudoRandom && enemyBoss.life) {
		toKillBossAppear(x, y);
		enemyPseudoRandom = 1;
	}
	else if (randnum < 40 * enemyPseudoRandom * (player.life < 2 ? 2 : 1) && !heartAdd.life && player.life < playerLifeLimit) {
		heartAddAppear(x, y);
		enemyPseudoRandom = 1;
	}
	else {
		enemyPseudoRandom *= 1.2;
	}

}


//道具
//加血
void heartAddAppear(int x, int y) {
	heartAdd.life = 1;
	heartAdd.potx = x;
	heartAdd.poty = y;
	//heartAdd.motion.v_y = 10;
}
void heartAddMove() {
	heartAdd.poty += heartAdd.motion.v_y;
	if (heartAdd.poty >= win_Height - playerH) {
		heartAdd.poty = win_Height - playerH;
	}
}
void heartAddIfBeenHit() {
	if (heartAdd.life) {
		if (IfTouch(player.potx, player.poty, playerW, playerH, heartAdd.potx + 20, heartAdd.poty + 20, 30))
		{
			heartAdd.life = 0;
			if (player.life < 5)
				player.life++;
		}
	}
}

void toKillBossAppear(int x, int y) {
	toKillBoss.life = 1;
	toKillBoss.potx = x;
	toKillBoss.poty = y;

}
void toKillBossMove() {
	toKillBoss.poty += toKillBoss.motion.v_y;
	if (toKillBoss.poty >= win_Height - playerH) {
		toKillBoss.poty = win_Height - playerH;
	}
}
void toKillBossIfBeenHit() {
	if (toKillBoss.life) {
		if (IfTouch(player.potx, player.poty, playerW, playerH, toKillBoss.potx + 20, toKillBoss.poty + 20, 10))
		{
			toKillBoss.life = 0;
			enemyBoss.life = 0;
			if (enemyIfLifeIncrease)bulletAttack += bulletAttackLevel;
		}
	}
}
//枪与子弹
void gunpot() {//枪的指向

	double gunsin = sin(gunD);
	double guncos = cos(gunD);
	gunPoints[0].x = centerX + guncos * GunPlayerDistance - gunsin * gunW / 2;
	gunPoints[0].y = player.poty + gunsin * GunPlayerDistance + guncos * gunW / 2;
	gunPoints[1].x = gunPoints[0].x + guncos * gunL;
	gunPoints[1].y = gunPoints[0].y + gunsin * gunL;
	gunPoints[2].x = gunPoints[1].x + gunsin * gunW;
	gunPoints[2].y = gunPoints[1].y - guncos * gunW;
	gunPoints[3].x = gunPoints[0].x + gunsin * gunW;
	gunPoints[3].y = gunPoints[0].y - guncos * gunW;



}
void bulletMove() {
	for (int i = 0; i < 20; i++) {
		if (playerBullet[i].life != 0) {
			playerBullet[i].potx += playerBullet[i].motion.v_x;
			playerBullet[i].poty += playerBullet[i].motion.v_y;
		}
	}
}
void seckill() {
	for (int i = 0; i < enemyNum; i++) {
		if (enemy[i].life > 0) {
			enemy[i].life = 0;
			enemyDeadNum++;
		}
	}
	enemyBoss.life = 0;
}

//子弹攻击敌人
void bullet_enemy() {

	for (int i = 0; i < 20; i++) {
		if (playerBullet[i].life != 0) {
			if (playerBullet[i].potx< -playerBulletR || playerBullet[i].potx>playerBulletR + win_Width ||
				playerBullet[i].poty< -playerBulletR || playerBullet[i].poty>playerBulletR + win_Height) {
				playerBullet[i].life = 0;
			}
			/*if (enemyBoss.life) {

			}*/
			for (int j = 0; j < enemyNum; j++) {
				if (enemy[j].life > 0) {
					if (distance(playerBullet[i].potx, enemy[j].potx, playerBullet[i].poty, enemy[j].poty) <= playerBulletR + enemyR) {
						enemy[j].life -= bulletAttack;
						if (enemy[j].life <= 0) {
							enemy[j].life = 0;
							enemyDead(enemy[j].potx, enemy[j].poty);
						}
						playerBullet[i].life = 0;
					}
				}
			}
		}

	}
}

//玩家的受伤与无敌
void playerGodChange(clock_t time) {
	if (time - timeGod > 1000) {
		//cout <<" god" << endl;
		playerGod = false;
	}
}
void playerIfBeenHit() {
	if (enemyBoss.life) {
		if (IfTouch(player.potx, player.poty, playerW, playerH, enemyBoss.potx, enemyBoss.poty, enemyR * 3))
			if (playerGod == 0) {
				enemyBoss.life -= bulletAttack;
				player.life -= 1;
				playerGod = true;
				timeGod = clock();
			}
	}
	for (int i = 0; i < enemyNum; i++) {
		if (enemy[i].life > 0) {
			if (IfTouch(player.potx, player.poty, playerW, playerH, enemy[i].potx, enemy[i].poty, enemyR))
			{
				enemy[i].life = 0;
				enemyAliveNum--;
				if (playerGod == 0) {
					player.life -= 1;
					playerGod = true;
					timeGod = clock();
				}
				return;
			}
		}
	}

}
void playerIfDead() {
	if (player.life <= 0) {
		Print();
		Ending(1);
	}
}

void Replay() {
	player.life = 3;
	timep = clock();
	for (int i = 0; i < enemyNum; i++) {//敌人
		enemy[i].life = 0;
	}
	for (int i = 0; i < 20; i++) {
		playerBullet[i].life = 0;
	}
	isUp = false;
	isDown = false;
	isLeft = false;
	isRight = false;
	player.potx = win_Width / 2 - playerW / 2;
	player.poty = win_Height - playerH;

	enemyAliveNum = 0;
	enemyAppearNum = 0;
	enemyDeadNum = 0;
	heartAdd.life = 0;
	toKillBoss.life = 0;
	enemyBoss.life = 0;
	bulletAttack = bulletAttackLevel;

}


void drawHeart(int x, int y) {
	solidpie(x, y, x + 20, y + 20, 0, PI);
	solidpie(x + 20, y, x + 40, y + 20, 0, PI);
	POINT Heart[3];
	Heart[0].x = x;
	Heart[0].y = y + 10;
	Heart[1].x = x + 40;
	Heart[1].y = y + 10;
	Heart[2].x = x + 20;
	Heart[2].y = y + 40;
	solidpolygon(Heart, 3);
}
void drawtoKillBoss(int x, int y) {
	POINT pts[] = { {x, y - 10}, {x + 10, y}, {x, y + 10},{x - 10, y } };
	solidpolygon(pts, 4);
}

void delay_ms(unsigned int milliseconds);
void delay_fps(unsigned int fps);
void Ending(int a) {
	if (a == 1) {//dead
		Print();
		MessageBox(GetHWnd(), _T("YOU DEAD"), _T("s"), MB_OK);
		Replay();
		startGame();
	}
	else if (a == 2) {//暂停游戏
		MessageBox(GetHWnd(), _T("PAUSE"), _T("s"), MB_OK);
	}
	else if (a == 3) {
		MessageBox(GetHWnd(), _T("REPLAY"), _T("s"), MB_OK);
		Replay();
		startGame();
	}
}
